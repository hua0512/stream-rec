###### START OF GLOBAL CONFIG SECTION ########
# Engine used to download the video (default to "ffmpeg")
engine = "ffmpeg"
# global flag to enable/disable danmu download
danmu = true
# global flag to enable/disable delete files after upload
# only used when streamers.downloadConfig.onPartedDownload or streamers.downloadConfig.onStreamingFinished is enabled
# streamers.downloadConfig.onPartedDownload has higher priority than streamers.downloadConfig.onStreamingFinished
# DANGER!!! : rclone (using callback) is considered as an upload operation!!!
deleteFilesAfterUpload = true
# output folder path
# Windows users should use double backslashes or single forward slashes to avoid escape characters,
# for example, "C:\\Users\\yourname\\Downloads" or "C:/Users/yourname/Downloads"
outputFolder = "path/to/your/output/folder"
# output file name format
# possible placeholder values: "{title}", "{streamer}", "%yyyy", "%MM", "%dd", "%HH", "%mm", "%ss"
outputFileName = "{title}-%yyyy-%MM-%dd %HH:%mm:%ss"
# output file format
# values: mp4, flv ... (formats supported by ffmpeg)
outputFileFormat = "mp4"
# minimum size (bytes) to be considered as valid download file (default to 20 MB)
# files smaller than this size will be deleted
minPartSize = 20000000
# maximum size (bytes) of a download part file (default to 2.5 GB)
# if a part file exceeds this size, it will be split into smaller parts
# if maxPartDuration is set, it has priority over maxPartSize
maxPartSize = 2621440000
# maximum duration (seconds) of a download part file, default not set
# if set, it has priority over maxPartSize
maxPartDuration = 3600
# maximum number of concurrent downloads
maxConcurrentDownloads = 5
# maximum number of concurrent uploads
maxConcurrentUploads = 3
# the maximum number of download retries after a failure
maxDownloadRetries = 3
# delay between download retries
downloadRetryDelay = 10

###### END OF GLOBAL CONFIG SECTION ########

############################################################################################

###### START OF PLATFORM CONFIG SECTION ########
# Huya platform config
[huyaConfig]
# primary CDN to use (default to "AL")
# possible values: "AL", HW", "TX", "BD", ...
primaryCdn = "AL"
# maximum bitrate
maxBitRate = 10000
# cookies to use (optional)
cookies = "your cookies"

# Douyin platform config
[douyinConfig]
# recording douyin stream requires cookies
# ttwid, __ac_nonce, __ac_signature are needed
# example: ttwid=aaaa; msToken=bbbb; __ac_nonce=cccc; __ac_signature=dddd;
cookies = "your cookies"
# maximum quality supported
# possible values: "origin", "uhd", "hd", "sd", "ld", "md", "audio"
quality = "origin"

###### END OF PLATFORM CONFIG SECTION ########

############################################################################################

###### START OF STREAMERS CONFIG SECTION ########
# streamers to record
# below is an example of a streamer configuration
# you can add more streamers by copying the block and changing the values

##############START OF STREAMER CONFIG SECTION##############

# BELOW IS AN EXAMPLE OF A SIMPLE STREAMER CONFIGURATION
[[streamers]]
# streamer name (obligatory)
name = "TheShy"
# streamer url (obligatory)
url = "https://www.huya.com/991111"
# whether to enable recording (default to true)
isActivated = false
############################################################

# BELOW IS AN EXAMPLE OF A STREAMER FULL CONFIGURATION
[[streamers]]
# streamer name (obligatory)
name = "TheShy"
# streamer url (obligatory)
url = "https://www.huya.com/991111"
# whether to enable recording (default to true)
isActivated = true

# streamer downloadconfig
# if not specified, it will use the default platform config
[streamers.downloadConfig]
# download config, possible values: "huya", "douyin"
type = "huya"
# cookies to use (optional)
# if not specified, it will use the default platform cookies
cookies = "your cookies"
# Huya primary CDN to use (optional, default to huyaConfig.primaryCdn)
primaryCdn = "HW"
# enable danmu download (optional, default to global danmu flag)
danmu = true
# Maximum bitrate (optional, default to huyaConfig.maxBitRate)
maxBitRate = 10000
# output folder path (optional, default to global outputFolder)
# Read the global outputFolder comment for more information
outputFolder = "path/to/your/output/folder/{streamer}/%yyyy-%MM-%dd}"
# output file name format (optional, default to global outputFileName)
# Read the global outputFileName comment for more information
outputFileName = "{title}-%yyyy-%MM-%dd %HH:%mm:%ss"
# output file extension (optional, default to global outputFileFormat)
outputFileExtension = "mp4"

# ASYNCHRONOUS callback to execute when a parted download is finished
# DANGER!!! : streamers.downloadConfig must be specified
[[streamers.downloadConfig.onPartedDownload]]
# callback type, possible values: "rclone", "command"
# DANGER!!!: "rclone" is considered as an upload operation.
# if global flag deleteFilesAfterUpload is enabled, the downloaded files will be deleted after the upload
#
# if "command" is used, the command will be executed in the shell and,
# the downloaded files path is passed as the first argument.
type = "rclone"
# whether to enable the callback (default to false)
enabled = true
# rclone operation type
# remove this line if you're using command
rcloneOperation = "copy"
# rclone remote name
# only used when type is "rclone"
# possible placeholder values: "{title}", "{streamer}", "%yyyy", "%MM", "%dd", "%HH", "%mm", "%ss"
remotePath = "drive:your/remote/path"
# program name, only used when type is "command"
# remove this line if you're using rclone
# program = "ls"

# program args
args = [
    "--config",
    "/path/to/your/rclone.conf",
    "-P",
    "--onedrive-chunk-size",
    "100M"
]

# ASYNCHRONOUS callback to execute when a streaming is finished
# DANGER!: if streamers.downloadConfig.onPartedDownload is enabled, there is no guarantee that at the time of the callback execution, onPartedDownload is finished
# DANGER!: if streamers.downloadConfig.onPartedDownload is enabled, there is no guarantee that at the time of the callback execution, onPartedDownload is finished
# DANGER!: if streamers.downloadConfig.onPartedDownload is enabled, there is no guarantee that at the time of the callback execution, onPartedDownload is finished
# SO BE CAREFUL WHEN USING BOTH CALLBACKS
# IF YOU'RE USING BOTH CALLBACKS, MAKE SURE TO CHECK IF THE FILES ARE UPLOADED BEFORE DELETING THEM (by checking the remote folder or if deleteFilesAfterUpload is enabled, check if the files are deleted)
[[streamers.downloadConfig.onStreamingFinished]]
# callback type, possible values: "rclone", "command"
# if "command" is used, the command will be executed in the shell and,
# a string of downloaded files path (separated by \n) is passed as the first argument
type = "command"
# whether to enable the callback (default to false)
enabled = true
# program name, only used when type is "command"
# remove this line if you're using rclone
program = "ls"
# program args
args = [
    "-l"
]

##############START OF STREAMER CONFIG SECTION##############

############################################################################################

###### END OF STREAMERS CONFIG SECTION ########