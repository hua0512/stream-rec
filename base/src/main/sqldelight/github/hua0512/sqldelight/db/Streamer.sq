CREATE TABLE IF NOT EXISTS user(
  id INTEGER PRIMARY KEY,
  username TEXT NOT NULL UNIQUE,
  password TEXT NOT NULL,
  role TEXT NOT NULL DEFAULT 'user'
);

getAllUsers : SELECT * FROM user;
getUserById : SELECT * FROM user WHERE id = ?;
getUserByUsername : SELECT * FROM user WHERE username = ?;
insertUser : INSERT INTO user(username, password, role) VALUES(?, ?, ?);
deleteUser : DELETE FROM user WHERE id = ?;
updateUser : UPDATE user SET username = ?, password = ?, role = ? WHERE id = ?;
getLastUserId : SELECT id FROM user ORDER BY id DESC LIMIT 1;

CREATE TABLE IF NOT EXISTS app_config(
  id INTEGER PRIMARY KEY,
   engine TEXT NOT NULL DEFAULT 'ffmpeg',
   danmu INTEGER NOT NULL DEFAULT 0,
   outputFolder TEXT DEFAULT '',
   outputFileName TEXT NOT NULL DEFAULT '{streamer}-{title}-%Y-%m-%d %H:%M:%S',
   outputFileFormat TEXT NOT NULL DEFAULT 'flv',
   minPartSize INTEGER NOT NULL DEFAULT 20000000,
   maxPartSize INTEGER NOT NULL DEFAULT 2621440000,
   maxPartDuration INTEGER,
   maxDownloadRetries INTEGER NOT NULL DEFAULT 3,
   downloadRetryDelay INTEGER NOT NULL DEFAULT 10,
   downloadCheckInterval INTEGER NOT NULL DEFAULT 60,
   maxConcurrentDownloads INTEGER NOT NULL DEFAULT 5,
   maxConcurrentUploads INTEGER NOT NULL DEFAULT 3,
   deleteFilesAfterUpload INTEGER NOT NULL DEFAULT 1,
   huyaConfig TEXT,
   douyinConfig TEXT,
   douyuConfig TEXT,
   twitchConfig TEXT,
   pandaliveConfig TEXT
);

-- QUERIES

selectAllAppConfig : SELECT * FROM app_config ORDER BY id DESC;
getAppConfigById : SELECT * FROM app_config WHERE id = ?;

upsertAppConfig{
    UPDATE app_config
    SET engine = :engine,
    danmu = :danmu,
    outputFolder = :outputFolder,
    outputFileName = :outputFileName,
    outputFileFormat = :outputFileFormat,
    minPartSize = :minPartSize,
    maxPartSize = :maxPartSize,
    maxPartDuration = :maxPartDuration,
    maxDownloadRetries = :maxDownloadRetries,
    downloadRetryDelay = :downloadRetryDelay,
    downloadCheckInterval=:downloadCheckInterval,
    maxConcurrentDownloads = :maxConcurrentDownloads,
    maxConcurrentUploads = :maxConcurrentUploads,
    deleteFilesAfterUpload = :deleteFilesAfterUpload,
    huyaConfig = :huyaConfig,
    douyinConfig = :douyinConfig,
    douyuConfig = :douyuConfig,
    twitchConfig = :twitchConfig,
    pandaliveConfig = :pandaliveConfig
    WHERE id = :id;

    INSERT OR IGNORE INTO app_config ( id, engine, danmu, outputFolder, outputFileName, outputFileFormat, minPartSize, maxPartSize, maxPartDuration, maxDownloadRetries, downloadRetryDelay, downloadCheckInterval, maxConcurrentDownloads, maxConcurrentUploads, deleteFilesAfterUpload, huyaConfig, douyinConfig, douyuConfig, twitchConfig, pandaliveConfig)
    VALUES ( :id, :engine, :danmu, :outputFolder, :outputFileName, :outputFileFormat, :minPartSize, :maxPartSize, :maxPartDuration, :maxDownloadRetries, :downloadRetryDelay,  :downloadCheckInterval,:maxConcurrentDownloads, :maxConcurrentUploads, :deleteFilesAfterUpload, :huyaConfig, :douyinConfig, :douyuConfig, :twitchConfig, :pandaliveConfig);
    }
deleteAppConfig : DELETE FROM app_config WHERE id = ?;



CREATE TABLE IF NOT EXISTS streamer(
  streamer_id INTEGER PRIMARY KEY,
  name TEXT NOT NULL,
  url TEXT NOT NULL UNIQUE ON CONFLICT ABORT ,
  platform INTEGER NOT NULL,
  last_stream INTEGER,
  is_live INTEGER NOT NULL DEFAULT 0,
  is_active INTEGER NOT NULL DEFAULT 0,
  template_id INTEGER DEFAULT -1,
  is_template INTEGER NOT NULL DEFAULT 0,
--   Storing download config is a headache, but storing as a string it's the easiest way to store it for now
  download_config TEXT,
  description TEXT,
  avatar TEXT,
  app_config_id INTEGER DEFAULT 1,
  FOREIGN KEY(app_config_id) REFERENCES app_config(id) ON DELETE SET DEFAULT
);

-- QUERIES
selectAll : SELECT * FROM streamer;
selectAllActive : SELECT * FROM streamer WHERE is_active = 1 AND is_template = 0;
selectAllInactive : SELECT * FROM streamer WHERE is_active = 0 AND is_template = 0;
selectAllTemplates : SELECT * FROM streamer WHERE is_template = 1;
selectAllNonTemplates : SELECT * FROM streamer WHERE is_template = 0;
getStreamerById : SELECT * FROM streamer WHERE streamer_id = ?;
getStreamerByName : SELECT * FROM streamer WHERE name = ?;
getStreamerNameById : SELECT name FROM streamer WHERE streamer_id = ? LIMIT 1;
findStreamerByUrl : SELECT * FROM streamer WHERE url = ?;
findStreamerByTemplateId : SELECT * FROM streamer WHERE template_id = ?;
countStreamersUsingTemplate : SELECT COUNT(*) FROM streamer WHERE template_id = ?;
insertStreamer : INSERT INTO streamer(name, url, platform, last_stream, is_live, is_active, description, avatar, template_id, is_template,  download_config, app_config_id) VALUES(?,?, ?, ?,?,?,?, ?,?,?, ?, 1);
updateStreamer : UPDATE streamer SET name = ?, url = ?, platform = ?, last_stream = ?, is_live = ?, is_active = ?, description = ?, avatar = ?, template_id = ?, is_template = ?, download_config = ?, app_config_id = ? WHERE streamer_id = ?;

updateStreamerStatus : UPDATE streamer SET is_live = ? WHERE streamer_id = ?;
updateStreamerDescription : UPDATE streamer SET description = ? WHERE streamer_id = ?;
updateStreamerAvatar : UPDATE streamer SET avatar = ? WHERE streamer_id = ?;
updateStreamerLastStream : UPDATE streamer SET last_stream = ? WHERE streamer_id = ?;

deleteStreamer : DELETE FROM streamer WHERE streamer_id = ?;



CREATE TABLE IF NOT EXISTS StreamData (
  id INTEGER PRIMARY KEY,
  title TEXT NOT NULL,
  dateStart INTEGER,
  dateEnd INTEGER,
  outputFilePath TEXT NOT NULL,
  danmuFilePath TEXT,
  outputFileSize INTEGER NOT NULL DEFAULT 0,
  streamerId INTEGER NOT NULL,
  FOREIGN KEY(streamerId) REFERENCES streamer(streamer_id) ON DELETE CASCADE
);

selectAllStreamData : SELECT * FROM StreamData;

selectAllStreamDataPagedAsc:
SELECT * FROM StreamData
WHERE (:allStreamers OR streamerId IN :streamerIds)
AND (:title IS NULL OR title LIKE :title || '%'
    OR outputFilePath LIKE :outputFilePath || '%' OR :outputFilePath IS NULL
    OR danmuFilePath LIKE :danmuFilePath || '%' OR :danmuFilePath IS NULL
)
AND (:dateStart IS NULL OR dateStart >= :dateStart )
AND (:dateEnd IS NULL OR dateEnd <= :dateEnd )
ORDER BY CASE
             WHEN :sortColumn = 'id' THEN id
             WHEN :sortColumn = 'title' THEN title
             WHEN :sortColumn = 'dateStart' THEN dateStart
             WHEN :sortColumn = 'dateEnd' THEN dateEnd
             WHEN :sortColumn = 'outputFileSize' THEN outputFileSize
             ELSE dateStart
             END ASC
LIMIT :limit OFFSET :offset;

selectAllStreamDataPagedDesc:
SELECT * FROM StreamData
WHERE (:allStreamers OR streamerId IN :streamerIds)
AND (:title IS NULL OR title LIKE :title || '%'
    OR outputFilePath LIKE :outputFilePath || '%' OR :outputFilePath IS NULL
    OR danmuFilePath LIKE :danmuFilePath || '%' OR :danmuFilePath IS NULL
)
AND (:dateStart IS NULL OR dateStart >= :dateStart )
AND (:dateEnd IS NULL OR dateEnd <= :dateEnd )
ORDER BY CASE
             WHEN :sortColumn = 'id' THEN id
             WHEN :sortColumn = 'title' THEN title
             WHEN :sortColumn = 'dateStart' THEN dateStart
             WHEN :sortColumn = 'dateEnd' THEN dateEnd
             WHEN :sortColumn = 'outputFileSize' THEN outputFileSize
             ELSE dateStart
             END DESC
LIMIT :limit OFFSET :offset;

countAllStreamData:
SELECT COUNT(*) FROM StreamData
WHERE (:allStreamers OR streamerId IN :streamerIds)
AND (:title IS NULL OR title LIKE :title || '%'
    OR outputFilePath LIKE :outputFilePath || '%' OR :outputFilePath IS NULL
    OR danmuFilePath LIKE :danmuFilePath || '%' OR :danmuFilePath IS NULL
)
AND (:dateStart IS NULL OR dateStart >= :dateStart)
AND (:dateEnd IS NULL OR dateEnd <= :dateEnd);

getStreamDataById : SELECT * FROM StreamData WHERE id = ?;
getStreamDataIdByOutputFilePath : SELECT id FROM StreamData WHERE outputFilePath = ? LIMIT 1;
selectAllStreamDataOfStreamer : SELECT * FROM StreamData WHERE streamerId = ? ORDER BY dateStart DESC;
insertStreamData : INSERT INTO StreamData(title, dateStart, dateEnd, outputFilePath, danmuFilePath, outputFileSize,  streamerId) VALUES(?, ?, ?, ?, ?,?, ?);
updateStreamData : UPDATE StreamData SET title = ?, dateStart = ?, dateEnd = ?, outputFilePath = ?, danmuFilePath = ?, outputFileSize =?, streamerId = ? WHERE id = ?;
deleteStreamData : DELETE FROM StreamData WHERE id = ?;


CREATE TABLE IF NOT EXISTS UploadData (
  id INTEGER PRIMARY KEY,
  filePath TEXT NOT NULL,
  streamDataId INTEGER,
  status INTEGER NOT NULL DEFAULT 0,
  FOREIGN KEY(streamDataId) REFERENCES StreamData(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS UploadResult (
  id INTEGER PRIMARY KEY,
  startTime INTEGER NOT NULL DEFAULT 0,
  endTime INTEGER NOT NULL DEFAULT 0,
  isSuccess INTEGER NOT NULL DEFAULT 0,
  message TEXT,
  uploadDataId INTEGER NOT NULL,
  FOREIGN KEY(uploadDataId) REFERENCES UploadData(id) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS UploadAction (
  id INTEGER PRIMARY KEY,
  time INTEGER NOT NULL,
  uploadConfig  TEXT NOT NULL
);


CREATE TABLE IF NOT EXISTS UploadActionFiles (
  uploadActionId INTEGER NOT NULL,
  uploadDataId INTEGER NOT NULL,
  FOREIGN KEY(uploadActionId) REFERENCES UploadAction(id) ON DELETE CASCADE,
  FOREIGN KEY(uploadDataId) REFERENCES UploadData(id) ON DELETE CASCADE
);

-- UploadAction Queries

-- Selects all records from the UploadAction table and orders them by time in descending order.
selectAllUploadActions : SELECT * FROM UploadAction ORDER BY time DESC;

selectAllUploadActionsWithFiles : SELECT * FROM UploadAction LEFT JOIN UploadActionFiles ON UploadAction.id = UploadActionFiles.uploadActionId;

-- Selects a record from the UploadAction table where the id matches the provided parameter.
getUploadActionById : SELECT * FROM UploadAction WHERE id = ?;

-- Inserts a new record into the UploadAction table with the provided time and uploadConfig values.
insertUploadAction : INSERT INTO UploadAction(time, uploadConfig) VALUES(?, ?);

getUploadActionIdByTimeAndConfig : SELECT id FROM UploadAction WHERE time = ? AND uploadConfig = ? LIMIT 1;

-- Deletes a record from the UploadAction table where the id matches the provided parameter.
deleteUploadAction : DELETE FROM UploadAction WHERE id = ?;


-- UploadData Queries

-- Selects all records from the UploadData table and orders them by streamStartTime in descending order.

selectAllUploadData : SELECT * FROM UploadData ORDER BY id DESC;

selectAllUploadDataPaginatedAsc:
SELECT UploadData.id, UploadData.filePath, UploadData.status, StreamData.id AS streamDataId
FROM UploadData JOIN StreamData ON UploadData.streamDataId = StreamData.id
WHERE (UploadData.status IN :status)
 AND ( :allStreamers OR StreamData.streamerId IN :streamers)
  AND (StreamData.title LIKE :title OR :title IS NULL
    OR UploadData.filePath LIKE '%' || :filePath || '%')
ORDER BY CASE
             WHEN :sortColumn = 'id' THEN UploadData.id
             WHEN :sortColumn = 'filePath' THEN UploadData.filePath
             WHEN :sortColumn = 'title' THEN StreamData.title
             ELSE UploadData.id
             END ASC
LIMIT :limit OFFSET :offset;

selectAllUploadDataPaginatedDesc:
SELECT UploadData.id, UploadData.filePath, UploadData.status, StreamData.id AS streamDataId
FROM UploadData
         JOIN StreamData ON UploadData.streamDataId = StreamData.id
WHERE (UploadData.status IN :status)
  AND ( :allStreamers OR StreamData.streamerId IN :streamers)
  AND (StreamData.title LIKE :title OR :title IS NULL
    OR UploadData.filePath LIKE '%' || :filePath || '%')
ORDER BY CASE
             WHEN :sortColumn = 'id' THEN UploadData.id
             WHEN :sortColumn = 'filePath' THEN UploadData.filePath
             WHEN :sortColumn = 'title' THEN StreamData.title
             ELSE UploadData.id
             END DESC
LIMIT :limit OFFSET :offset;

countAllUploadData:
SELECT COUNT(*) FROM UploadData
         JOIN StreamData ON UploadData.streamDataId = StreamData.id
WHERE (UploadData.status IN :status)
  AND (:allStreamers OR StreamData.streamerId IN :streamers)
  AND (StreamData.title LIKE :title OR :title IS NULL
  OR UploadData.filePath LIKE '%' || :filePath || '%');


selectAllUploadDataByStatus : SELECT * FROM UploadData WHERE status = ?;

-- Selects a record from the UploadData table where the id matches the provided parameter.
getUploadDataById : SELECT * FROM UploadData WHERE id = ?;

-- Updates the status of a record in the UploadData table where the id matches the provided parameter.
updateUploadDataStatus : UPDATE UploadData SET status = ? WHERE id = ?;

-- Deletes a record from the UploadData table where the id matches the provided parameter.
deleteUploadData : DELETE FROM UploadData WHERE id = ?;

-- Inserts a new record into the UploadData table with the provided streamTitle, streamer, streamStartTime, filePath, and streamDataId values.
insertUploadData : INSERT INTO UploadData(filePath, streamDataId, status) VALUES( ?, ?, ?);

getUploadDataIdByPath : SELECT id FROM UploadData WHERE filePath = ? LIMIT 1;


-- UploadActionFiles Queries

-- Selects all records from the UploadActionFiles table.
selectAllUploadActionFiles : SELECT * FROM UploadActionFiles;

-- Selects a record from the UploadActionFiles table where the uploadActionId matches the provided parameter.
getUploadActionFilesByActionId : SELECT * FROM UploadActionFiles WHERE uploadActionId = ?;

-- Deletes a record from the UploadActionFiles table where the uploadActionId matches the provided parameter.
deleteUploadActionFilesByActionId : DELETE FROM UploadActionFiles WHERE uploadActionId = ?;

-- Inserts a new record into the UploadActionFiles table with the provided uploadActionId and uploadDataId values.
insertUploadActionFiles : INSERT INTO UploadActionFiles(uploadActionId, uploadDataId) VALUES(?, ?);

-- Get upload action file by upload data id
getUploadActionFileByUploadDataId : SELECT * FROM UploadActionFiles WHERE uploadDataId = ?;

-- Get UploadAction by upload data id, merge with UploadAction
getUploadActionByUploadDataId : SELECT * FROM UploadActionFiles LEFT JOIN UploadAction ON UploadActionFiles.uploadActionId = UploadAction.id WHERE uploadDataId = ?;


-- UploadResult Queries

-- Selects all records from the UploadResult table and orders them by time in descending order.
selectAllUploadResult : SELECT * FROM UploadResult ORDER BY startTime DESC;

-- Selects all records from the UploadResult table and orders them by time in descending order with pagination.
selectAllUploadResultPaginated : SELECT * FROM UploadResult ORDER BY startTime DESC LIMIT ? OFFSET ?;

-- Selects all records from the UploadResult table where the isSuccess is 0 and orders them by time in descending order.
selectAllFailedUploadResult : SELECT * FROM UploadResult WHERE isSuccess = 0 ORDER BY startTime DESC;

-- Selects a record from the UploadResult table where the id matches the provided parameter.
getUploadResultById : SELECT * FROM UploadResult WHERE id = ?;

findResultsByFilePath : SELECT * FROM UploadResult LEFT JOIN UploadData ON UploadResult.uploadDataId = UploadData.id WHERE UploadData.filePath = ? ORDER BY startTime DESC;

findResultsByUploadDataId : SELECT * FROM UploadResult WHERE uploadDataId = ? ORDER BY startTime DESC;

-- Inserts a new record into the UploadResult table with the provided time, isSuccess, message, and filePath values.
insertUploadResult : INSERT INTO UploadResult(startTime, endTime, isSuccess, message, uploadDataId) VALUES(?, ?,?, ?, ?);

getUploadResultIdByTimeAndUploadDataId : SELECT id FROM UploadResult WHERE startTime = ? AND uploadDataId = ? LIMIT 1;

-- Deletes a record from the UploadResult table where the id matches the provided parameter.
deleteUploadResult : DELETE FROM UploadResult WHERE id = ?;

CREATE TABLE IF NOT EXISTS Stats (
  id INTEGER PRIMARY KEY,
  time INTEGER NOT NULL,
  totalStreams INTEGER NOT NULL DEFAULT 0,
  totalUploads INTEGER NOT NULL DEFAULT 0,
  totalFailedUploads INTEGER NOT NULL DEFAULT 0
);

-- Stats Queries

-- Selects all records from the Stats table and orders them by time in descending order.
selectAllStats : SELECT * FROM Stats ORDER BY time DESC;

-- Selects a record from the Stats table where the id matches the provided parameter.
getStatsById : SELECT * FROM Stats WHERE id = ?;

-- Inserts a new record into the Stats table with the provided time, totalStreams, totalUploads, and totalFailedUploads values.
insertStats : INSERT INTO Stats(time, totalStreams, totalUploads, totalFailedUploads) VALUES(?, ?, ?, ?);

-- Updates the totalStreams, totalUploads, and totalFailedUploads values of a record in the Stats table where the id matches the provided parameter.
updateStats : UPDATE Stats SET totalStreams = ?, totalUploads = ?, totalFailedUploads = ? WHERE id = ?;

-- Deletes a record from the Stats table where the id matches the provided parameter.
deleteStats : DELETE FROM Stats WHERE id = ?;

-- Get stats by time
getStatsByTime : SELECT * FROM Stats WHERE time = ? LIMIT 1;

-- Get stats by time range
getStatsByTimeRange : SELECT * FROM Stats WHERE time >= ? AND time <= ? ORDER BY time DESC;

-- Get stats by time range
getStatsByTimeRangeWithLimit : SELECT * FROM Stats WHERE time >= ? AND time <= ? ORDER BY time DESC LIMIT ?;

-- Get stats by time range
getStatsByTimeRangeWithOffset : SELECT * FROM Stats WHERE time >= ? AND time <= ? ORDER BY time DESC LIMIT ? OFFSET ?;

-- Get stats by time range
getStatsByTimeRangeWithLimitAndOffset : SELECT * FROM Stats WHERE time >= ? AND time <= ? ORDER BY time DESC LIMIT ? OFFSET ?;

-- Get stats by time range
getStatsByTimeRangeWithLimitAndOffsetAndOrderDesc : SELECT * FROM Stats WHERE time >= ? AND time <= ? ORDER BY time DESC LIMIT ? OFFSET ?;

-- Get stats by time range
getStatsByTimeRangeWithLimitAndOffsetAndOrderAsc : SELECT * FROM Stats WHERE time >= ? AND time <= ? ORDER BY time ASC LIMIT ? OFFSET ?;